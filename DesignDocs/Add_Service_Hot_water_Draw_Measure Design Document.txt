NREL Measure Design Document Text File

Note: you can include ruby snippets for arguments and messaged, but it isn't necessary. If you are 
comfortable with it, it makes writing the measure quicker if the code is already structured here.

EnergyPlus 8.1 documentation reference: 
http://bigladdersoftware.com/epx/docs/8-1/input-output-reference/

>> Start of XML content

Measure Name: 	Add_Water_Use_Equipment_Object
Measure Type: 	ModelMeasure

Tag		Service Water Heating.Water Use

Description:
This measure allows the user to create specify new WaterUseEquipment and WaterUseConnection objects to the current model. 
Users can specify the required properties of the OSWaterUse:Equipment objects or specify the creation of objects adherent to the 
BA Benchmark Home (for new construction). If desired, daily water usage and schedules from the BA House Simulation Protocols 
can be assigned to the water use objects. Alternatively, a schedule representing constant usage (which can be later modified) can be generated. 
If an existing hot water loop is chosen, this measure will not alter any supply side equipment used for hot water generation, but will only attach 
objects to the demand side of the loop. If the user elects to create a new hot water loop, an 0.59 EF hot water heater representing typical 
performance will be created and configured. If desired, users will need to manually configure the supply equipment to adhere to BA Benchmark home 
requirements.

Model Description:
The measure will ask the user to define all fields associated OS:WaterUseEquipment objects. Users will need to specify the Hot Water Loop 
to assign the WaterUseEquipment objects to, and will also need to specify the locations and daily draws (gpd) of key residential hot water 
equipment objects. Users will be offered checkboxes, which if selected will create BA Benchmark (New Construction) compliant objects for hot 
water usage and delivery.

OpenStudio Version: 1.4.0

>> Start of Measure.rb content

Arguments:

###showers, baths, sinks, dishwasher, and clothes washer

1) Choice list of existing_hot_water_loops (Plant Loops having type = heating, to add OS:WaterUseEquipment connections to)
	Display Name:		Hot Water Loop to assign WaterUseEquipment to? 
	Required:			Yes		## In addition to listing existing hot water loops, the selection should include the ability to create a new hot water loop... 
	Type:				StringVector
	Default:			N/A

2) Checkbox for using_Standard_DHW_Event_Schedules_and_event_draws (Yes/No) 
	Display Name:		Check to use the standard SHW Event schedules and event draws from the spreadsheet found in the "Hourly Profiles" tab
						of the B10 Analysis - New Construction 2011.1.26.xlsm spreadsheet. If this box is checked, user arguments entered for 
						gallons per day flow amounts below will be ignored. If this box is not checked, user arguments for gallons per day of 
						usage will be used, and a schedule of constant hourly usage values (1.0 for each hour) will be created.
	Required:			Yes
	Type:				Boolean (CheckBox)
	Default:			No
	
3) Choice List of number_Of_Bedrooms
	Required:			Yes
	Type: 				Integer (1, 2, 3, 4, 5)
	Display Name: 		Number of Bedrooms in the Proposed Home. If more than 5 bedrooms enter 5. 
	Default Value:		N/A

4) 	shower_gpd
	Required:			Yes
	Type: 				DoubleArgument
	Display Name: 		Gallons per day of shower water usage (combined hot and cold water draw, delivered at 110F). 
	Default Value:		N/A

5) bath_gpd
	Required:			Yes
	Type: 				DoubleArgument
	Display Name: 		Gallons per day of bath water usage (combined hot and cold water draw, delivered at 110F). 
	Default Value:		N/A
	
6) sinks_gpd
	Required:			Yes
	Type: 				DoubleArgument
	Display Name: 		Gallons per day of sinks water usage (combined hot and cold water draw, delivered at 110F). 
	Default Value:		N/A
	
7)  Choice List of shower_sink_bath_location
	Required:			Yes
	Type: 				String (created from Vector of names of OS:Space in the model)
	Display Name: 		Location of Showers, Sinks and Baths?
	Default Value:		N/A

8) 	clothes_washer_gpd
	Required:			Yes
	Type: 				DoubleArgument
	Display Name: 		Gallons per day of clothes washer usage (hot water only, delivered at the hot water setpoint.) 
	Default Value:		N/A
	
9)  Choice List of clothed_washer_location
	Required:			Yes
	Type: 				String (created from Vector of names of OS:Space in the model)
	Display Name: 		Clothes Washer Location?
	Default Value:		N/A

10) dishwasher_gpd
	Required:			Yes
	Type: 				DoubleArgument
	Display Name: 		Gallons per day of dishwasher usage (hot water only, delivered at hot water setpoint.) 
	Default Value:		N/A

11)  Choice List of dishwasher_location
	Required:			Yes
	Type: 				String (created from Vector of names of OS:Space in the model)
	Display Name: 		Dishwasher Location?
	Default Value:		N/A

12) average_annual_temp
	Required:			Yes
	Type: 				DoubleArgument
	Display Name: 		The average annual outside dry bulb temperature of the building's location (Deg F).
	Default Value:		N/A
	
13) min_monthly_average_temp
	Required:			Yes
	Type: 				DoubleArgument
	Display Name: 		The minimum value of the monthly average temperatures of the building's location (Deg F).
	Default Value:		N/A

14) max_monthly_average_temp
	Required:			Yes
	Type: 				DoubleArgument
	Display Name: 		The maximum value of the monthly average temperatures of the building's location (Deg F).
	Default Value:		N/A
	
Error Message:

Validate input arguments using standard validation methods 

	
	
	If using_Standard_DHW_Event_Schedules_and_event_draws = false 
			and 
		gpd of any  object (sink, bath, etc) < 0 
			then 
		write error message "Daily usage values must be greater than or equal to zero". 

	If max_monthly_average_temp < -30 or > 130 then write error message "Temperature entered for Maximum Monthly Average is not realistic."
	
	If min_monthly_average_temp < -50 or > 110 then write error message "Temperature entered for Minimum Monthly Average is not realistic."
	
	If average_annual_temp < -40 or > 120 then write error message "Temperature entered for Annual Average is not realistic."
			
		
	Warning Message:

	Retrieve total number of people <x> in model by summing number of people in each space of the model. Use people method of space object
	
	If clothes_washer_gpd > 11.7 then write warning message "Clothes washer gpd of <clothes_washer_gpd> based on <x> number of people and <number_Of_Bedrooms> 
														  number of bedrooms seems excessive.  #Limit based on 12 bdrm usage prediction from BA Spreadsheet
	
	If shower_gpd > 70.04 then write warning message "Shower gpd of <shower_gpd> based on <x> number of people and <number_Of_Bedrooms> 
														  number of bedrooms seems excessive. #Limit based on 12 bdrm usage prediction from BA Spreadsheet
														  
	If dishwasher_gpd > 11.26 then write warning message "Dishwasher gpd of <dishwasher_gpd> based on <x> number of people and <number_Of_Bedrooms> 
														  number of bedrooms seems excessive. #Limit based on 12 bdrm usage prediction from BA Spreadsheet
														  
	If bath_gpd > 17.54 then write warning message "Bath gpd based of <bath_gpd> on <x> number of people and <number_Of_Bedrooms> 
													number of bedrooms seems excessive. #Limit based on 12 bdrm usage prediction from BA Spreadsheet
												  
	If sinks_gpd > 62.42 then write warning message "Bath gpd of <sinks_gpd> based on <x> number of people and <number_Of_Bedrooms> 
													 number of bedrooms seems excessive. #Limit based on 12 bdrm usage prediction from BA Spreadsheet

	If max_monthly_average_temp > 100 then write warning message "Temperature entered for Maximum Monthly Average seems high. Please check values."

	If max_monthly_average_temp < -10 then write warning message "Temperature entered for Maximum Monthly Average seems low. Please check values."
		
	If min_monthly_average_temp > 85 then write warning message "Temperature entered for Minimum Monthly Average seems high. Please check values."

	If max_monthly_average_temp < 5 then write warning message "Temperature entered for Maximum Monthly Average seems low. Please check values."

	If average_annual_temp > 85 then write warning message "Temperature entered for annual average seems high. Please check values."

	If average_annual_temp < 5 then write warning message "Temperature entered for annual average seems low. Please check values."
						  
Info Message:

	None

Not Applicable Message:

	If model has 0 spaces then write Error message "Model has no spaces. Measure will not run."
	
Initial Condition Message:

	Model started with <x> OS:WaterUseConnection objects, <y> OS:WaterUseDefinition objects <z> OS:WaterUseEquipment objects. Use count method to get these.

Final Condition Message:

	Model ended with <x> OS:WaterUseConnection objects, <y> OS:WaterUseDefinition objects <z> OS:WaterUseEquipment objects

	#Do this for every type of fixture created. 
	
		
Code Outline:

>> Start of MyMeasure_Test.rb content

# Get arguments from user

# convert argument method variable into run method variables

# test run method variable for error and warning messages

# convert IP arguments into SI equivalents. NOTE Some equations will use IP units, but all assignments on attributes to OS objects will use SI units.
 
# Step 0 - Create monthly site water mains temperature array in Deg F

		For month = 1 to 12 step 1
			site_water_mains_temp(x) =
				Maximum of 
					32 
					or 
					average_annual_temp + 6 + (0.4 + 0.01 * (average_annual_temp - 44)) * (max_monthly_average_temp - min_monthly_average_temp)) / 2 * SIN((0.986 * ((month * 30 - 15) - 15 - (35 - 1 * (average_annual_temp - 44))) - 90) * PI()/180)
		
		###NOTE In preceeding equation we might not need the /180, its purpose is to convert from rad to degrees
		
		next month
			
			
			
# Step 1 - Create Peak flow objects and unitized (differing monthly) and flow rate fraction schedule objects for sink, clothes washer, shower, bath and dishwasher

If using_Standard_DHW_Event_Schedules_and_event_draws = true then create a new complex schedule for each equipment type.

		See simple code snippet for creating a simple schedule @ 	
	https://github.com/NREL/OpenStudio-measures/blob/91fbbc1f2a4a9b2fff27f529d7e45ab99fe20649/NREL%20working%20measures/AedgK12ElectricEquipment/resources/OsLib_Schedules.rb	
	
		#EXAMPLE FOR CLOTHES WASHER

	Step 1a - determine monthly gal per day usage for each device type
		
	For clothes washers and dishwashers: 
		
		For month = 1 to 12
		
			monthly clothes_washer_daily_usage(month)  = 2.35 + .78 * (num_bdr)	## Note units = (gal per day)
	
			dishwasher_daily_usage(month) = 2.26 + 0.75 * (num_bdr)  ## Note units = (gal per day)

		next month 			
	
	For showers, sinks and baths:

		For month = 1 to 12 step 1

			shower_daily_usage(month) = 14.0 + 4.67 * (num_bdr) * MAX((110 - site_water_mains_temp(month)) / (125 - site_water_mains_temp(month)),0) ## Note units = gal per day
		
			sinks_daily_usage(month) = 12.5 + 4.16 * (num_bdr) * MAX((110 - site_water_mains_temp(month)) / (125 - site_water_mains_temp(month)),0) ## Note units = gal per day
			
			baths_daily_usage(month) = 3.5 + 1.17 * (num_bdr) * MAX((110 - site_water_mains_temp(month)) / (125 - site_water_mains_temp(month)),0) ## Note units = gal per day
		
		next month
		
	Step 1b - take the gal / day / month values from step 1a and apply a standard, fixed % load profile to create gallon per hour profiles for each month
	
	For each device and for each month - multiply (Fixed % of gallon per hour value) * (gallon per day (device)). Store this result.

		For Clothes Washer
		hr 	Fixed % of gallon per day value		RESULT (gallon per hour)
		1	0.009								clothes_washer_daily_usage_per_month(Jan) * 0.009)
		2	0.007								clothes_washer_daily_usage_per_month(Jan) * 0.007)
		3	0.004								""		""
		4	0.004
		5	0.007
		6	0.011
		7	0.022
		8 	0.049
		9	0.073
		10	0.086
		11	0.084
		12	0.075
		13	0.067
		14	0.060
		15	0.052
		16	0.049
		17	0.050
		18	0.049
		19	0.049
		20	0.049
		21	0.049
		22	0.047
		23	0.032
		24	0.017
	
		For Dishwasher
		1	0.015
		2	0.007
		3	0.005
		4	0.003
		5	0.003
		6	0.010
		7	0.020
		8	0.031
		9	0.058
		10	0.065
		11	0.056
		12	0.048
		13	0.041
		14	0.046
		15	0.038
		16	0.036
		17	0.038
		18	0.049
		19	0.087
		20	0.111
		21	0.090
		22	0.067
		23	0.044
		24	0.031

		For Baths
		1	0.008
		2	0.004
		3	0.004
		4	0.004
		5	0.008
		6	0.019
		7	0.046
		8	0.058
		9	0.066
		10	0.058
		11	0.046
		12	0.035
		13	0.031
		14	0.023
		15	0.023
		16	0.023
		17	0.039
		18	0.046
		19	0.077
		20	0.100
		21	0.100
		22	0.077
		23	0.066
		24	0.039

		For Showers
		1	0.011
		2	0.005
		3	0.003
		4	0.005
		5	0.014
		6	0.052
		7	0.118
		8	0.117
		9	0.095
		10	0.074
		11	0.060
		12	0.047
		13	0.034
		14	0.029
		15	0.025
		16	0.026
		17	0.030
		18	0.039
		19	0.042
		20	0.042
		21	0.042
		22	0.041
		23	0.029
		24	0.021

		For Sinks
		1	0.014
		2	0.007
		3	0.005
		4	0.005
		5	0.007
		6	0.018
		7	0.042
		8	0.062
		9	0.066
		10	0.062
		11	0.054
		12	0.050
		13	0.049
		14	0.045
		15	0.041
		16	0.043
		17	0.048
		18	0.065
		19	0.075
		20	0.069
		21	0.057
		22	0.048
		23	0.040
		24	0.027

	Step 1.c - For each device, retrieve the peak flow value (peak gal per hour from all 24 hours x 12 months values generated in step 1.b) 
	
		1.c.1 - Convert the peak value to from IP units (gal/hr) to SI units (m3/sec) and store as a variable for later use.
	
	Step 1.d - For each device, Create a 'unitized' array of monthly values representing the load profile 
	
			For each device, retrieve the peak annual gallon per hour value. Divide all other values (24 x 12) by this value. This will create an array with one value of 1.0
	
	Step 1.e - 	For each device , create a new complex schedule (each month will have different values for each of the 24 hours). 
				The values will be < 1.0 except for one hour of one month.
				
				## #NOTE SAMPLE SCHEDULE SNIPPET 
				
				
				sink_fraction_flow_sch = OpenStudio::Model::ScheduleRuleset.new(model)
				sink_fraction_flow_sch.setName("sink_fraction_flow")
				sink_fraction_flow_sch.defaultDaySchedule().setName("Sink Fraction Flow Default")
				
				Create loop 1
				sink_fraction_flow_sch.defaultDaySchedule().addValue(OpenStudio::Time.new(0,24,0,0),Norm(x, month, hr)
			
			##NOTE format OpenStudio::Time.new(1-12,1-24,0,0),Norm(x, month, hr)
	
			
	If using_Standard_DHW_Event_Schedules_and_event_draws = FALSE then create a simple schedule for this object which has a value of 1.0 for all hours, all days, 

## NOTE SEE CODE SNIPPET BELOW FOR CREATING SIMPLE SCHEDULE

							  
				  sat_sch = OpenStudio::Model::ScheduleRuleset.new(model)
				  sat_sch.setName("Supply Air Temp")
				  sat_sch.defaultDaySchedule().setName("Supply Air Temp Default")
				  sat_sch.defaultDaySchedule().addValue(OpenStudio::Time.new(0,24,0,0),1.0)
	  	
	
	NOTE: Repeat this process for the sink, shower, bath, dish washer and clothes washer objects. Create flow rate fraction schedules for each and 
			store the peak flow values. 
			
	NOTE: the peak flow values should be converted and stored in a variable as SI unts of m3/sec

If using_Standard_DHW_Event_Schedules_and_event_draws = false then for each device create a simple schedule where all values = 1.0 for all hours. 
	
#Step 2 - Create new OS objects representing water use network.
		
		# 2.a For each device, create a NEW OS:WaterUseEquipmentDefinition object for the device
			 
			2.a.1 Set peakFlowRate attribute of this object:
				
				if using_Standard_DHW_Event_Schedules_and_event_draws = true 
				then 
					Assign the PeakFlowRate attribute from  the hourly max of the peak array of each device. Note convert to m3/sec for setting
				else
					Assign PeakFlowRate attribute = sinks_gpd/24 (use direct user argument and convert to m3/sec)
				
			2.a.2 Create TargetTemperatureSchedule for the device
			
			NOTE: 	For clothes washers and dishwashers devices,  the target temperature schedule will be equal to the target temp schedule 
					of the water heater attached to the existing hot water loop,(i.e. value of WaterHeaterMixed.SetpointTemperatureSchedule), 
					if it exists.. 
				
						If existing_hot_water_loops <> "create new" and no OS:WaterHeaterMixed object exists on the selected loop 
							then
							create a new target temperature schedule of 110 Deg F write warning message "No water heater exists in the selected 
							water loop. A target temperature schedule of 110F has been created and assigned to the <clothes washer or dishwasher>."
			
					For Showers, Baths and Sink devices, a target temperature schedule of a constant value of 110F will be created. 
					NOTE: remember to convert the 110 F to C before creating the simple schedule.
			
			2.a.3 Set TargetTemperatureSchedule

				OS:WaterUseEquipmentDefinition.setTargetTemperatureSchedule(<schedule_name>)

				
		# 2.b 	For showers, baths and sinks, (not clothes washers or dishwashers) create new objects representing the sensible space gains 
				and schedules and assign them to the proper space. These values do not change monthly
				
			shower_daily_sense_internal_gain = 741 + 247 * (num_bdr)  ## Note units = Btu/day
		
			sinks_daily_sense_internal_gain = 310 + 103 * (num_bdr)  ## Note units = Btu/day
			
			baths_daily_sense_internal_gain = 185 + 62 * (num_bdr)  ## Note units = Btu/day
		
		#2.b.1 - take the btu / day  values from step 2.b and apply a standard, fixed % load profile to create btu / hr profiles 
	
			For each device - multiply (Fixed % of sensible btu per day per hour value) * (btu per day (device)). Store this result in an array. 
			Units will be Btu/hr
	
			For Showers
			
			hr  % of Btu/day gain		Result 
			1	0.011					shower_daily_sense_internal_gain * 0.011
			2	0.005					shower_daily_sense_internal_gain * 0.005
			3	0.003					""				""				""
			4	0.005
			5	0.014
			6	0.052
			7	0.118
			8	0.117
			9	0.095
			10	0.074
			11	0.060
			12	0.047
			13	0.034
			14	0.029
			15	0.026
			16	0.025
			17	0.030
			18	0.039
			19	0.042
			20	0.042
			21	0.042
			22	0.041
			23	0.029
			24	0.021

			For Baths
			hr  % of Btu/day gain
			1	0.008
			4	0.004
			5	0.008
			6	0.019
			2	0.004
			3	0.004
			7	0.046
			8	0.058
			9	0.066
			10	0.058
			11	0.046
			12	0.035
			13	0.031
			14	0.023
			15	0.023
			16	0.023
			17	0.039
			18	0.046
			19	0.077
			20	0.100
			21	0.100
			22	0.077
			23	0.066
			24	0.039

			For Sinks
			hr  % of Btu/day gain
			1	0.014
			2	0.007
			3	0.005
			4	0.005
			5	0.007
			6	0.018
			7	0.042
			8	0.062
			9	0.066
			10	0.062
			11	0.054
			12	0.050
			13	0.049
			14	0.045
			15	0.043
			16	0.041
			17	0.048
			18	0.065
			19	0.075
			20	0.069
			21	0.057
			22	0.048
			23	0.040
			24	0.027

		# 2.c 	For showers and sinks, (not baths, clothes washers or dishwashers) create new objects representing the latent space gains 
				and schedules and assign them to the proper space. These values do not change monthly
				
			shower_daily_latent_internal_gain = 703 + 235 * (num_bdr)  ## Note units = Btu/day
		
			sinks_daily_latent_internal_gain = 147 + 47 * (num_bdr)  ## Note units = Btu/day
			
		#2.c.1 - take the btu / day  values from step 2.c and apply a standard, fixed % load profile to create btu / hr profiles 
	
			For each device - multiply (Fixed % of sensible btu per day per hour value) * (btu per day (device)). Store this result in an array. 
			Units will be Btu/hr
	
			For Showers
			
			hr  % of Btu/day gain		Result 
			1	0.011					shower_daily_latent_internal_gain * 0.011
			2	0.005					shower_daily_latent_internal_gain * 0.005
			3	0.003					""				""				""
			4	0.005
			5	0.014
			6	0.052
			7	0.118
			8	0.117
			9	0.095
			10	0.074
			11	0.060
			12	0.047
			13	0.034
			14	0.029
			15	0.026
			16	0.025
			17	0.030
			18	0.039
			19	0.042
			20	0.042
			21	0.042
			22	0.041
			23	0.029
			24	0.021

			For Sinks
			hr  % of Btu/day gain
			1	0.014
			2	0.007
			3	0.005
			4	0.005
			5	0.007
			6	0.018
			7	0.042
			8	0.062
			9	0.066
			10	0.062
			11	0.054
			12	0.050
			13	0.049
			14	0.045
			15	0.043
			16	0.041
			17	0.048
			18	0.065
			19	0.075
			20	0.069
			21	0.057
			22	0.048
			23	0.040
			24	0.027

			For clothes washers, dishwashers and bath devices, the latent gains are assumed to be zero.

		2.c.2 - For each device, retrieve the peak hourly sensible gain values (peak btu per hour from all 24 hours values generated in step 2.c) 
	
			2.b.3 - For each device Convert the peak value to from IP units (btu/hr) to SI units (W) and store as a variable for later use.
			
					shower_latent_peak_btu-hr = max (array of annual hourly latent gains)
					shower_sensible_peak_btu-hr max (array of annual hourly sensible gains, has a monthly dimension)
					
					sink_latent_peak_btu-hr = max (array of annual hourly latent gains)
					sink_sensible_peak_btu-hr max (array of annual hourly sensible gains, has a monthly dimension)
					
					dishwasher_latent_peak_btu-hr = max (array of annual hourly latent gains)								## Note = 0 per table 11 2014 BA Simulaton Protocol pdf
					dishwasher_sensible_peak_btu-hr max (array of annual hourly sensible gains, has a monthly dimension)	## Note = 0 per table 11 2014 BA Simulaton Protocol pdf
					
					clothes_washer_latent_peak_btu-hr = max (array of annual hourly latent gains)							## Note = 0 per table 11 2014 BA Simulaton Protocol pdf
					clothes_washer_sensible_peak_btu-hr max (array of annual hourly sensible gains, has a monthly dimension)## Note = 0 per table 11 2014 BA Simulaton Protocol pdf
					
					bath_latent_peak_btu-hr = max (array of annual hourly latent gains)										## Note = 0 per table 11 2014 BA Simulaton Protocol pdf
					bath_washer_sensible_peak_btu-hr = max (array of annual hourly sensible gains, has a monthly dimension))
								
			2.b.4 - For each device, determine the sum of the peak btu-hr values determined in 2.b.3. Divide all other values in the array used in 
					2.b.3 by this value. This will create an new (unitized) array with different hourly values stored for each month with only one element having a value of 1.0.

			2.b.5 - For each device, create a new complex OS:Schedule object (each hour will have different values for each of the 24 hours) 
					representing the array generated in step 2.b.4. The schedule values will be < 1.0 except for one hour of one month.
					
					NOTE: This will happen regardless of the value of using_Standard_DHW_Event_Schedules_and_event_draws
	
		2.c - For each device, create and configure a new OS:OtherEquipmentDefinition Objects and OS:OtherEquipment objects and assign to proper OS:spaces

			# 2.c.1 For each device, create a NEW OS:OtherEquipmentDefinition object						
	
				Set the design level calculation attribute of the OS:OtherEquipmentDefinition object:	
					
					OS:OtherEquipment.setdesignLevelCalculationMethod(EquipmentLevel)
					
				Set the design level attribute of the OS:OtherEquipmentDefinition object:	
					
					OS:OtherEquipment.setDesignLevel(peak wattage calculated in step 2.b.4)
				
				Set the fraction latent attribute of the OS:OtherEquipmentDefinition object 
				
				OS:OtherEquipment.setfractionLatent(fraction_latent)
			
				device 			fraction_latent 
				shower				0.487197	# Note based on 3 bedroom calculation.. result is not constant but is very insensitive to # of bedrooms 	
				sink				0.31222  	# Note based on 3 bedroom calculation.. result is not constant but is very insensitive to # of bedrooms 	
				dishwasher			0.000		# Note Per Table 11 in 2014 BA Simulation Protocol pdf.
				bath				0.000		# Note Per Table 11 in 2014 BA Simulation Protocol pdf.
				clothes washer		0.000		# Note Per Table 11 in 2014 BA Simulation Protocol pdf.
		
						
			# 2.c.2 For each device, create a NEW OS:OtherEquipment object 
		
				Assign the OS:OtherEquipmentDefinition to a paired OS:OtherEquipment object:
						OS:OtherEquipment.setOtherEquipmentDefinition = <objects created in step 2.c.1.
			
				Set schedule associatyed with OS:OtherEquipment object
						OS:OtherEquipment.setSchedule(schedule created in step 2.b.5)

		# 2.d For each device, create a NEW OS:WaterUseEquipment object						
						
				Assign the OS:WaterUseEquipmentDefinition object:	
						OS:WaterUseEquipment.setWaterUseEquipmentDefinition(wateruseequipdefname)
	
				Assign the OS:WaterUseEquipment object to the correct space:	
						OS:Space.waterUseEquipment(Space = sinks_location, based on direct user argument) 
			
				Assign FlowRateFranction Schedule: 	
						OS:WaterUseEquipment.setFlowRateFractionSchedule(<appropriate schedule created in step 1>) 
				
						
		# 2.e For each device, create a NEW OS:WaterUseConnection object 
		
				Assign the OS:WaterUseEquipment object to the OS:WaterUseConnection object
						WaterUseConnection.addWaterUseEquipment(device created in step 2.d)
				
	#3.0 Assign Water Use Connections to the demand side of the appropriate hot water loop

		3.a If creating a new plant loop is needed then (i.e. existing_hot_water_loops = create new loop) then
		
					create #Note this measure will only create a new plantloop one time) 
						new loop
						new pump using near zero energy
						new OS:water Heater object using default parameters.
							assign water heater efficiency of 80%
						new bypass branch
						new scheduled setpoint temperature controller. 
					
					assign supply side object to the loop

					apply the OS:WaterUseConnnection objects to the demand side of new loop. 
							OS:PlantLoop.addDemandBranchForComponent(water_use_connection_name from step 2.e)

		3.b If assigning OS:WaterUseConnection objects to an existing loop then 
		
					apply the OS:WaterUseConnnection objects to the demand side of selected loop. 
							OS:PlantLoop.addDemandBranchForComponent(water_use_connection_name from step 2.e)
							
		3.b.1 Create Info Messages 
				An OS:WaterUse:Connection object named [WUC NAME] was created with and associated OS:WaterUseDefinition object named [WUD NAME] 
				with the following properties:
				Peak Flow Rate - <x> gpm ##Note the object attrribute may be in m3/sec)
				Target Temperature Schedule - Provide name of target temperature schedule
				Sensible Fraction Schedule - Provide name of Sensible Fraction temperature schedule
				Latent Fraction Schedule - Provide name of Latent Fraction temperature schedule
				The OS:WaterUse:Connection object named [WUC NAME] was added to the hot water plant loop named [hot water plant loop name].
							
							
#_______________________________________________________________
	List of different attributes for water use equipment types
	
			1) Clothes washer will have no sensible or latent fraction objects created or schedules assigned.
			
			2) Clothes washer will have target temperature schedule = WaterHeaterMixed.setpointTemperatureSchedule
				If existing_hot_water_loops <> create new and no OS:WaterHeaterMixed object exists on the selected loop then
					create a new target temperature schedule of 110 Deg F
					write warning message "No water heater exists in the selected water loop. A target temperature schedule of 110F has been created and assigned to the clothes washer."
			
			3) Dishwasher will have no sensible or latent fraction objects created or schedules assigned.
			
			4) Dishwasher will have target temperature schedule = WaterHeaterMixed.setpointTemperatureSchedule
				If existing_hot_water_loops <> create new loop option and no OS:WaterHeaterMixed object exists on the selected loop then
					create a new target temperature schedule of 110 Deg F
					write warning message "No water heater exists in the selected water loop. A target temperature schedule of 110F has been created and assigned to the dishwasher."
					
			5) Bath will have no latent fraction object created or schedule assigned.		
#________________________________________________________________

Tests: These will largely be unit tests and then attempts to recreate what is in the 2011 BA New Construction Benchmark Spreadsheet 
# get arguments and test that they are what we are expecting
# set arguments to bad values and see that it fails as expected


